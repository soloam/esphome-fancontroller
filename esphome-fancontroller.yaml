substitutions:
  device_name: "ATI Ambiente Fan Controller"
  device_name_low: "ati_ambient_fan_controller"
  comment: "ATI Fan Controller"
  version: "1.0.0"
  speed_low: "10"
  speed_med: "50"
  speed_full: "100"

esphome:
  name: "${device_name_low}"
  comment: "${comment}"
  platform: ESP8266
  board: d1_mini
  project:
    name: "soloam.fan_controller"
    version: "${version}"
  on_boot:
    then:
      - delay: 10s
      - fan.turn_on:
          id: fan_speed
          speed: "${speed_low}"
      - delay: 5s
      - fan.turn_on:
          id: fan_speed
          speed: "${speed_full}"

api:

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password
  fast_connect: true
  domain: .myhome
  use_address: 192.168.7.200
  ap:
    ssid: "${device_name}"
    password: !secret wifi_ap_password

captive_portal:

web_server:
  port: 80

# Enable logging
#debug:

#logger:
#  level: debug

ota:

mqtt:
  broker: !secret mqtt_broker
  discovery: false
  topic_prefix: "esphome/${device_name_low}"

output:
  - platform: esp8266_pwm
    pin: D4
    frequency: 15000 Hz
    id: pwm_output

fan:
  - platform: speed
    id: fan_speed
    output: pwm_output
    speed_count: 100
    name: "${device_name} Fan"
    command_topic: "esphome/${device_name_low}/fan/command"
    state_topic: "esphome/${device_name_low}/fan/state"
    on_turn_on:
      then:
        - switch.turn_on: power
    on_turn_off:
      then:
        - switch.turn_off: power
number:
  - platform: template
    icon: "mdi:fan"
    id: speed_input
    name: "${device_name} Fan Speed"
    lambda: |-
      return id(fan_speed).speed;
    step: 1
    min_value: 1
    max_value: 100
    unit_of_measurement: "%"
    update_interval: 1s
    set_action:
      then:
        - fan.turn_on:
            id: fan_speed
            speed: !lambda "return x;"
        - component.update: fanmode
        - component.update: sensor_fanspeed

select:
  - platform: template
    icon: "mdi:fan"
    name: "${device_name} Fan Mode"
    id: fanmode
    update_interval: 1s
    lambda: |-
      if(id(fan_speed).speed <= ${speed_low})
        return std::string("Low");
      else if(id(fan_speed).speed == ${speed_med})
        return std::string("Medium");
      else if(id(fan_speed).speed >= ${speed_full})
        return std::string("Full");
      else
        return std::string("Custom");
    set_action:
      then:
        - lambda: |-
            auto call = id(fan_speed).turn_on();

            if(x == "Low")
              call.set_speed(${speed_low});
            else if(x == "Medium")
              call.set_speed(${speed_med});
            else if(x == "Full")
              call.set_speed(${speed_full});
            else
              call.set_speed(id(speed_input).state);
              
            call.perform();
        - component.update: speed_input
        - component.update: sensor_fanspeed
    options:
      - Low
      - Medium
      - Full
      - Custom

switch:
  - platform: gpio
    name: "${device_name} Power"
    pin: D1
    id: power
    restore_mode: RESTORE_DEFAULT_ON
    internal: true

button:
  - platform: template
    icon: "mdi:fan-speed-1"
    name: "${device_name} Set Low Speed"
    id: fanlow
    on_press:
      - fan.turn_on:
          id: fan_speed
          speed: "${speed_low}"
  - platform: template
    icon: "mdi:fan-speed-2"
    name: "${device_name} Set Medium Speed"
    on_press:
      - fan.turn_on:
          id: fan_speed
          speed: "${speed_med}"
  - platform: template
    icon: "mdi:fan-speed-3"
    name: "${device_name} Set Full Speed"
    on_press:
      - fan.turn_on:
          id: fan_speed
          speed: "${speed_full}"
  - platform: restart
    name: "${device_name} Restart"

sensor:
  - platform: template
    id: sensor_fanspeed
    icon: "mdi:fan"
    name: "${device_name} Fan Seed"
    lambda: |-
      return id(fan_speed).speed;
    update_interval: 1s
    accuracy_decimals: 0
    unit_of_measurement: "%"
  - platform: dht
    pin: D2
    temperature:
      name: "${device_name} Temperature"
    humidity:
      name: "${device_name} Humidity"
    update_interval: 30s
    model: DHT22
  - platform: pulse_counter
    icon: "mdi:fan"
    pin:
      number: D3
    name: "${device_name} RPM"
    unit_of_measurement: rpm
    accuracy_decimals: 0
    filters:
      - multiply: 0.5
    count_mode:
      rising_edge: DISABLE
      falling_edge: INCREMENT
    update_interval: 1s
